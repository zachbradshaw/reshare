{"version":3,"sources":["app.js","nav/main-nav-controller.js","shares/new-share-controller.js","shares/share.js","shares/shares-controller.js","users/user-controller.js","users/user.js","users/users-controller.js","utils/string-util.js","shares/services/share-service.js","shares/services/vote-service.js","users/services/users-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// The root module for our Angular application\nvar app = angular.module('app', ['ngRoute']);\n","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', function($location, StringUtil) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n\n      return StringUtil.startsWith($location.path(), path);\n    };\n  }]);\n","app.config(['$routeProvider', function($routeProvider) {\n  $routeProvider.when('/shares/new-share', {\n    controller: 'NewShareCtrl',\n    controllerAs: 'vm',\n    templateUrl: 'shares/new-share.html'\n  });\n}]).controller('NewShareCtrl', ['$location', 'Share', 'shareService', function($location, Share, shareService) {\n  var self = this;\n\n  self.share = Share();\n\n  self.cancelEditing = function () {\n    self.goToShares();\n  };\n\n  self.goToShares = function () {\n    $location.path('/shares');\n  };\n\n  self.addShare = function () {\n    shareService.addShare(self.share).then(self.goToShares);\n  }\n}]);\n","app.factory('Share', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      url: spec.url,\n      description: spec.description,\n      tags: spec.tags\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares.html',\n    controller: 'SharesCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      shares: ['shareService', function (shareService) {\n        return shareService.getShareList();\n      }]\n    }\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/shares', routeDefinition);\n}])\n.controller('SharesCtrl', ['shares', 'shareService', 'voteService', 'Share', function (shares, shareService, voteService, Share) {\n\n  var self = this;\n\n  self.shares = shares;\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['$route', 'usersService', function ($route, usersService) {\n        var routeParams = $route.current.params;\n        return usersService.getByUserId(routeParams.userid);\n      }]\n    }\n  };\n\n  $routeProvider.when('/users/:userid', routeDefinition);\n}])\n.controller('UserCtrl', ['user', function (user) {\n  this.user = user;\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      userId: spec.userId || '',\n      role: spec.role || 'user'\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/users.html',\n    controller: 'UsersCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      users: ['usersService', function (usersService) {\n        return usersService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/users', routeDefinition);\n}])\n.controller('UsersCtrl', ['users', 'usersService', 'User', function (users, usersService, User) {\n  var self = this;\n\n  self.users = users;\n\n  self.newUser = User();\n\n  self.addUser = function () {\n    // Make a copy of the 'newUser' object\n    var user = User(self.newUser);\n\n    // Add the user to our service\n    usersService.addUser(user).then(function () {\n      // If the add succeeded, remove the user from the users array\n      self.users = self.users.filter(function (existingUser) {\n        return existingUser.userId !== user.userId;\n      });\n\n      // Add the user to the users array\n      self.users.push(user);\n    });\n\n    // Clear our newUser property\n    self.newUser = User();\n  };\n}]);\n","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.factory('shareService', ['$http', '$log', function($http, $log) {\n  // My $http promise then and catch always\n  // does the same thing, so I'll put the\n  // processing of it here. What you probably\n  // want to do instead is create a convenience object\n  // that makes $http calls for you in a standard\n  // way, handling post, put, delete, etc\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, share) {\n    return processAjaxPromise($http.post(url, share));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    getShareList: function () {\n      return get('/api/res');\n    },\n\n    getShare: function (id) {\n      return get('/api/res/' + id);\n    },\n\n    addShare: function (share) {\n      return post('/api/res', share);\n    },\n\n    deleteShare: function (id) {\n      return remove('/api/res/' + id);\n    }\n  };\n}]);\n","app.factory('voteService', ['$http', function(http) {\n  function post(share) {\n    return processAjaxPromise($http.post(share));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    upvote: function (share) {\n      return post('/api/res/' + id/votes).then(function () {\n        return { vote: 1 }\n      })\n    },\n\n    downvote: function (share) {\n      return post('/api/res/' + id/votes).then(function () {\n        return { vote: -1 }\n      })\n    }\n  };\n}]);\n","app.factory('usersService', ['$http', '$q', '$log', function($http, $q, $log) {\n  // My $http promise then and catch always\n  // does the same thing, so I'll put the\n  // processing of it here. What you probably\n  // want to do instead is create a convenience object\n  // that makes $http calls for you in a standard\n  // way, handling post, put, delete, etc\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    list: function () {\n      return get('/api/users');\n    },\n\n    getByUserId: function (userId) {\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return get('/api/users/' + userId);\n    },\n\n    addUser: function (user) {\n      return processAjaxPromise($http.post('/api/users', user));\n    }\n  };\n}]);\n"],"sourceRoot":"/source/"}